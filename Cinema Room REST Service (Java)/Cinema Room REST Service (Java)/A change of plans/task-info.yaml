type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Models/Room.java
  visible: true
  text: |
    package cinema.Models;

    import java.util.ArrayList;
    import java.util.List;


    public class Room {

        private final int totalRows;
        private final int totalColumns;
        private final List<Seat> seats = new ArrayList<>();

        public Room() {
            totalColumns = 0;
            totalRows = 0;
        }

        public Room(int totalRows, int totalColumns) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            for (int row = 1; row <= totalRows; row++) {
                int price = (row > 4 ? 8 : 10);
                for (int column = 1; column <= totalColumns; column++)
                    seats.add(new Seat(row, column, price, false));
            }
        }

        public int getTotalRows() {
            return totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public List<Seat> getSeats() {
            return seats;
        }

        public Seat getSeat(int row, int column) {
            return seats.get(row * totalColumns + column);
        }

        // index = (seat.row - 1) * this.totalColumns + seat.column - 1
        public Seat getSeat(int index) {
            return seats.get(index);
        }

        public Boolean isSeatTaken(int row, int column) {
            return seats.get(row*totalColumns + column).isTaken();
        }

        public void takeSeat(int row, int column) {
            seats.get(row * totalColumns + column).setTaken(true);
        }


    }
  learner_created: true
- name: src/cinema/Exceptions/SeatDoesNotExist.java
  visible: true
  text: |
    package cinema.Exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class SeatDoesNotExist extends RuntimeException{
        public SeatDoesNotExist(String msg) {
            super(msg);
        }
    }
  learner_created: true
- name: src/cinema/DTOs/SeatDTO.java
  visible: true
  text: |
    package cinema.DTOs;

    public record SeatDTO (int row, int column, int price) { }
  learner_created: true
- name: src/cinema/Controllers/CinemaController.java
  visible: true
  text: |
    package cinema.Controllers;

    import cinema.DTOs.PositionDTO;
    import cinema.DTOs.RoomDTO;
    import cinema.DTOs.SeatDTO;
    import cinema.Models.Room;
    import cinema.Models.Seat;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.LinkedList;
    import java.util.List;
    import java.util.Map;

    @RestController
    public class CinemaController {

        private final Room room;

        public CinemaController() {
            final int total_rows = 9;
            final int total_columns = 9;
            this.room = new Room(total_rows, total_columns);
        }

        @GetMapping("/seats")
        public RoomDTO getSeats() {
            return roomToDTO(room);
        }

        @GetMapping("/seats2")
        public Room getSeats2() {
            return room;
        }

        @GetMapping("/seat/{id}")
        public Seat getSeat(@PathVariable int id) {
            return room.getSeat(id);
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseSeat(@RequestBody PositionDTO positionDTO) {

            int row = positionDTO.row() - 1;
            int column = positionDTO.column() - 1;

            if (row >= room.getTotalRows() || column >= room.getTotalColumns()
                    || column < 0 || row < 0) {
                Map<String, String> m = Map.of("error", "The number of a row or a column is out of bounds!");
                return new ResponseEntity<>(m, HttpStatus.BAD_REQUEST);
            }

            if (room.isSeatTaken(row, column)) {
                Map<String, String> m = Map.of("error", "The ticket has been already purchased!");
                return new ResponseEntity<>(m, HttpStatus.BAD_REQUEST);
            }

            room.takeSeat(row, column);
            return ResponseEntity.ok( seatToDTO(room.getSeat(row, column)) );
        }

        private SeatDTO seatToDTO(Seat seat) {
            return new SeatDTO(seat.getRow(), seat.getColumn(), seat.getPrice());
        }

        private RoomDTO roomToDTO(Room room) {
            List<SeatDTO> seatsDTO = new LinkedList<>();
            for(int i = 0; i < room.getTotalColumns() * room.getTotalRows(); i++)
                seatsDTO.add(seatToDTO(room.getSeat(i)));
            return new RoomDTO(room.getTotalRows(), room.getTotalColumns(), seatsDTO);
        }

    }
  learner_created: true
- name: src/cinema/Models/Seat.java
  visible: true
  text: |
    package cinema.Models;

    import java.util.Objects;

    public final class Seat {
        private final int row;
        private final int column;
        private final int price;
        private boolean isTaken;

        public Seat(int row, int column, int price, boolean isTaken) {
            this.row = row;
            this.column = column;
            this.price = price;
            this.isTaken = isTaken;
        }

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public int getPrice() {
            return price;
        }

        public boolean isTaken() {
            return isTaken;
        }

        public void setTaken(boolean taken) {
            isTaken = taken;
        }
    }
  learner_created: true
- name: src/cinema/DTOs/PositionDTO.java
  visible: true
  text: |
    package cinema.DTOs;

    public record PositionDTO(Integer row, Integer column) {
    }
  learner_created: true
- name: src/cinema/Exceptions/SeatAlreadyTakenException.java
  visible: true
  text: |
    package cinema.Exceptions;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class SeatAlreadyTakenException extends RuntimeException{
        public SeatAlreadyTakenException(String msg) {
            super(msg);
        }
    }
  learner_created: true
- name: src/cinema/DTOs/RoomDTO.java
  visible: true
  text: |
    package cinema.DTOs;

    import java.util.List;

    public record RoomDTO (int total_rows, int total_columns, List<SeatDTO> available_seats) { }
  learner_created: true
- name: src/cinema/DTOs/TicketDTO.java
  visible: true
  learner_created: true
- name: src/cinema/Models/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/DTOs/ReturnTokenDTO.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 25 Apr 2023 09:30:57 UTC"
record: -1
