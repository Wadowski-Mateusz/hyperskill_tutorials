type: edu
files:
- name: src/Main.kt
  visible: true
  text: |
    package encryptdecrypt

    fun main(args: Array<String>) {
        var mode: String = "dec"
        var data: String = ""
        var key: Int = 0

        if (args.isNotEmpty()) {
            if (args.indexOf("-mode") != -1)
                mode = args[args.indexOf("-mode") + 1]
            if (args.indexOf("-key") != -1)
                key = args[args.indexOf("-key") + 1].toInt()
            if (args.indexOf("-data") != -1)
                data = args[args.indexOf("-data") + 1]
        }

        val output: String = when (mode) {
            "enc" -> encryption(data, key)
            "dec" -> decryption(data, key)
            else -> "No such a command!"
        }
        println(output)
    }

    fun encryption(message: String, key: Int): String =
        buildString { message.map { append((it.code + key).toChar()) } }

    fun decryption(ciphertext: String, key: Int): String =
        buildString { ciphertext.map { append((it.code - key).toChar()) } }

    //  // encryption
    //    val encMsg = buildString {
    //        for (char in msg) {
    //            if (char in 'a'..'z')
    //                append( ((char.code - 'a'.code + key) % 26 + 'a'.code).toChar()  )
    //            else
    //                append((char.code).toChar())
    //        }
    //    }
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/21970#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 07 Apr 2023 20:22:54 UTC"
record: 5
